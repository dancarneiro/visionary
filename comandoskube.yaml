swapoff -a

istioctl dashboard -----

Docker:

 curl -fsSL https://get.docker.com | bash

cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
 
sudo mkdir -p /etc/systemd/system/docker.service.d

systemctl daemon-reload

systemctl restart docker

Instalando Kubernetes:

apt-get update && apt-get install -y apt-transport-https gnupg2

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list

apt-get update

apt-get install -y kubelet kubeadm kubectl

##############--------------------------MASTER-----------------------------------#########################
kubeadm config images pull

kubeadm init 

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

----------------------------------------------------------------------------------------------------------------
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
############################################################################################################
Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.1.50:6443 --token n3mjx7.87mb1ukj4yvsz6r4 \
    --discovery-token-ca-cert-hash sha256:321c6fe3149c1d6dd08fba98af253bbbfa6d64b8a1f46fe8c1189d3dc3fdb286 
##########################################################################################################

Erro de certificado:
    export KUBECONFIG=/etc/kubernetes/admin.conf
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

#kubeadm reset -f /apaga tudo e gera novo join

# kubectl get pods

# kubectl get pods -n

# kubectl get pods -n mynamespace

# kubectl delete meu_primeiro_pod.yaml

# kubectl delete meu_primeiro_pod

# kubectl get pods

# kubectl delete nginx

# kubectl delete -f meu_primeiro_pod.yaml

# kubectl run nginx --image=nginx --dry-run=client -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
# kubectl run nginx --image=nginx --dry-run=client -o yaml > meu_segundo_pod.yaml

 vi meu_segundo_pod.yaml
 
 apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
    ports:
    - containerPort: 80
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

 # kubectl create -f meu_segundo_pod.yaml

# kubectl create -f meu_segundo_pod.yaml

# kubectl get pods

# kubectl delete nginx

# kubectl delete pods nginx

 vi meu_segundo_pod.yaml
# kubectl create -f meu_segundo_pod.yaml

# kubectl get pods

NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          10s

# kubectl expose pod nginx

service/nginx exposed

# kubectl get services

NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP   2d1h
nginx        ClusterIP   10.104.218.238   <none>        80/TCP    25s

# kubectl describe services nginx
Namespace
Name:              nginx
Namespace:         default
Labels:            run=nginx
Annotations:       <none>
Selector:          run=nginx
Type:              ClusterIP
IP Families:       <none>
IP:                10.104.218.238
IPs:               10.104.218.238
Port:              <unset>  80/TCP
TargetPort:        80/TCP
Endpoints:         10.44.0.1:80
Session Affinity:  None
Events:            <none>

# kubectl edit  services nginx

-# Please edit the object below. Lines beginning with a '#' will be ignored,
-# and an empty file will abort the edit. If an error occurs while saving this file will be
-# reopened with the relevant failures.
-#
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2021-02-07T01:14:13Z"
  labels:
    run: nginx
  name: nginx
  namespace: default
  resourceVersion: "44721"
  uid: ce848c24-2f0f-40c0-83a0-14464d16e634
spec:
  clusterIP: 10.104.218.238
  clusterIPs:
  - 10.104.218.238
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: nginx
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}

# kubectl get services

NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP        2d2h
nginx        NodePort    10.104.218.238   <none>       80:31681/TCP   12m

Comentario: 
Se eu colocar o ip de qualquer um dos nós :31681(ou qualquer outra porta eu definir),
vou acessar o serviço'

ip a:
...
2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 08:00:27:0e:ad:f6 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.8/24 brd 192.168.1.255 scope global enp0s3
...

# http://192.168.1.8:31681 ou  http://192.168.1.9:31681 ou  http://192.168.1.10:31681

......................................................................................
......................................................................................
......................................................................................
......................................................................................

HTML
Add-ons:
https://kubernetes.io/docs/concepts/cluster-administration/networking/
https://chrislovecnm.com/kubernetes/cni/choosing-a-cni-provider/
https://kubernetes.io/docs/concepts/cluster-administration/addons/
HTML
# vim primeiro-service-clusterip.yaml:

apiVersion: v1
kind: Service
metadata:
  labels:
    run: nginx
  name: nginx-clusterip
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: nginx
  sessionAffinity: None
  type: ClusterIP
HTML
# vim primeiro-service-nodeip.yaml:

apiVersion: v1
kind: Service
metadata:
  labels:
    run: nginx
  name: nginx-nodeport
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 32548
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: nginx
  sessionAffinity: ClientIP
  type: NodePort
HTML
# vim primeiro-service-loadbalancer.yaml:

apiVersion: v1
kind: Service
metadata:
  labels:
    run: nginx
  name: nginx-loadbalancer
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 32548
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: nginx
  sessionAffinity: None
  type: LoadBalancer
HTML
# kubectl create -f primeiro-service-clusterip.yaml

# kubectl create -f primeiro-service-nodeip.yaml

# kubectl create -f primeiro-service-loadbalancer.yaml

# kubectl edit -f primeiro-service-nodeip.yaml

# kubectl get deploy nginx -o yaml > primeiro-deployment-limitado.yaml

# kubectl exec -ti nginx-limitado-8d767cd5f-lg5xs -- /bin/bash

# kubectl replace -f deployment_limitado.yaml

# kubectl get endpoints

# kubectl describe endpoints nginx-ddswrgb

HTML
# vim deployment-limitado.yaml


apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    run: nginx
  name: nginx-limitado
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      run: nginx
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            memory: 128Mi
            cpu: 1
          requests:
            memory: 96Mi
            cpu: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
